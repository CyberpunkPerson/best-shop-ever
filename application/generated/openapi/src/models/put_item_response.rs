/*
 * Best shop ever API
 *
 * Test project for Rust education purpose
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cyberpunk.perosn@gmail.com
 * Generated by: https://openapi-generator.tech
 */

use actix_web::{Error, HttpRequest, HttpResponse, Responder};
use futures::future::{ready, Ready};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PutItemResponse {
    #[serde(rename = "payload")]
    pub payload: Box<crate::models::Item>,
}

impl PutItemResponse {
    pub fn new(payload: crate::models::Item) -> PutItemResponse {
        PutItemResponse {
            payload: Box::new(payload),
        }
    }
}

// Responder
impl Responder for PutItemResponse {
    type Error = Error;
    type Future = Ready<Result<HttpResponse, Error>>;

    fn respond_to(self, _req: &HttpRequest) -> Self::Future {
        let body = serde_json::to_string(&self).unwrap();

        // Create response and set content type
        ready(Ok(HttpResponse::Ok()
            .content_type("application/json")
            .body(body)))
    }
}
